source $XDG_CONFIG_HOME/vim/relocate_vim

syntax on
set shiftwidth=4
set number
set relativenumber
set smartindent
set nowrap
set noswapfile
set hlsearch
set ignorecase
set incsearch
set shell=/bin/zsh
set splitright
set splitbelow
set path+=**
set termwinsize=10x0
set backspace=indent,eol,start
" set cursorline
" set cursorlineopt=number
" set list listchars=tab:>,trail:<,nbsp:.
" filetype on
filetype plugin on
" set ttymouse=sgr
" set mouse=a
" filetype indent on

"###### Lets ########
let @c = "ggyG"
let mapleader = " "
"###### Lets ########


"###### AutoCommands #############################
" autocmd BufWritePre * normal gg=G``
" autocmd BufNewFile,BufRead * setlocal formatoptions-=cro
autocmd BufWinEnter,BufNewFile * setlocal formatoptions-=cro
"###### AutoCommands #############################


"###### Remaps #############################
map <C-g> :term<CR>
map <C-S-g> :bo term<CR>
map <C-A> ggVG
map <silent> <C-H> :noh<CR>
map <C-P> :FZF<CR>
map <Leader>= gg=G``

cnoremap w!! execute 'silent! write !sudo tee > /dev/null %' <bar> edit!

nmap <F2> <Plug>(coc-rename)
nmap <Leader>ff g_zf%
nmap <Leader>/ gcc
nnoremap Y y$
nnoremap <C-k> <C-w>
" nnoremap <Leader>1 1gt
" nnoremap <Leader>2 2gt
" nnoremap <Leader>3 3gt
" nnoremap <Leader>4 4gt
" nnoremap <Leader>5 5gt
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
" noremap <ESC> <Nop>
nnoremap <silent> <Leader>l :vsplit<CR>
nnoremap <silent> <Leader>j :split<CR>
nnoremap <silent> <Leader>g :highlight! Comment ctermfg=7<CR>
nnoremap <silent> <Leader>h :highlight! Comment ctermfg=16<CR>
" nnoremap <C-j> <C-w>j
" nnoremap <C-h> <C-w>h
" nnoremap <C-k> <C-w>k
" nnoremap <C-l> <C-w>l

" inoremap jk <ESC>
inoremap , ,<C-G>u
inoremap . .<C-G>u
" imap <Leader>j <Backspace>
"###### Remaps #############################


"###### Moving Lines ###################
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '>-2<CR>gv=gv
inoremap <C-j> <esc>:m .+1<CR>==
inoremap <C-k> <esc>:m .-2<CR>==
" nnoremap <leader>j <esc>:m .+1<CR>==
" nnoremap <leader>k <esc>:m .-2<CR>==
"###### Moving Lines ###################


"###### Highlighting ###########################
highlight IncSearch ctermbg=darkmagenta ctermfg=white
highlight Search ctermbg=darkmagenta ctermfg=white

highlight LineNrAbove ctermfg=darkcyan
highlight LineNr ctermfg=white
highlight LineNrBelow ctermfg=cyan

highlight VertSplit ctermfg=darkmagenta ctermbg=darkmagenta
highlight Visual ctermbg=darkmagenta ctermfg=white
highlight Folded ctermbg=none ctermfg=magenta cterm=italic,bold

" highlight Comment ctermfg=darkgrey cterm=italic,bold
highlight Comment ctermfg=darkgrey cterm=italic
highlight Constant ctermfg=darkyellow
highlight Special ctermfg=green
highlight SpecialChar ctermfg=red
highlight Identifier ctermfg=darkcyan
highlight Statement ctermfg=darkmagenta
highlight PreProc ctermfg=magenta
highlight Type ctermfg=yellow
highlight Underline ctermfg=red cterm=reverse
highlight Ignore ctermfg=red cterm=reverse
highlight String ctermfg=green
highlight Boolean ctermfg=red
highlight Number ctermfg=red

" highlight Folded
highlight DiffAdd ctermbg=none ctermfg=green
highlight DiffChange ctermbg=none
highlight DiffDelete ctermbg=none ctermfg=red
highlight DiffText ctermbg=darkmagenta ctermfg=white

highlight SignColumn ctermbg=none

highlight Pmenu ctermbg=darkmagenta ctermfg=white
highlight PmenuSel ctermbg=blue ctermfg=yellow

highlight MatchParen ctermbg=darkmagenta ctermfg=white
"###### Highlighting ###########################
"
"###### Highlighting ###########################
" highlight LineNr ctermfg=4 
" highlight Comment ctermfg=8 cterm=italic,bold
" highlight Search ctermbg=5 ctermfg=7
" highlight Pmenu ctermbg=5 ctermfg=7
" highlight MatchParen ctermbg=5 ctermfg=7
" highlight Cursor ctermfg=7
" highlight Visual ctermbg=5 ctermfg=15
" highlight CursorLine term=bold ctermbg=8
" highlight CursorLineNr ctermbg=4 ctermfg=7
" set list listchars=tab:>,trail:<,nbsp:.
"###### Highlighting ###########################


"###### Plugins ###################################################
call plug#begin()
Plug 'vimwiki/vimwiki'
Plug 'tpope/vim-fugitive'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'itchyny/lightline.vim'
Plug 'andymass/vim-matchup'
Plug 'tpope/vim-surround'
Plug 'godlygeek/tabular'
Plug 'tomtom/tcomment_vim'
Plug 'psliwka/vim-smoothie'
Plug 'thoughtbot/vim-rspec'
" Plug 'ap/vim-css-color'
" Plug 'ecomba/vim-ruby-refactoring' " Plug 'matchit.vim'
" Plug 'tpope/vim-rails'
" SnipMate
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'
Plug 'jiangmiao/auto-pairs'
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
call plug#end()
"###### Plugins ###################################################


"###### Lightline ####################################################################
set laststatus=2
set noshowmode
let g:lightline =   { 
	    \   'colorscheme' : 'molokai',
	    \   'active' 	    : {
		\   	'left'      : [ [ 'mode', 'paste' ],
		\  			[ 'readonly', 'absolutepath', 'modified' ] ],
		\  	'right'     : [ [ 'lineinfo' ],
		\  		        [ 'percent'  ],
		\  		        [ 'filetype' ], ], },
		\      'component' : {
		    \         'hellow' : 'Hey XeviL !' },
		    \   }
"###### Lightline ####################################################################


"###### RSpec #####################################################
nmap <Leader>t :call RunCurrentSpecFile()<CR>
nmap <Leader>a :call RunAllSpecs()<CR>
nmap <Leader>n :call RunNearestSpec()<CR>
" map <Leader>l :call RunLastSpec()<CR>
"##################################################################

"###### CoC #################################################################
let g:coc_global_extentions = ['coc-tabnine', 'coc-snippets', 
	    \'coc-solargraph', 'coc-pairs',
	    \'coc-json']

source $XDG_CONFIG_HOME/vim/plug-config/coc.vim

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <C-x><C-z> coc#pum#visible() ? coc#pum#stop() : "\<C-x>\<C-z>"

" remap for complete to use tab and <cr>
inoremap <silent><expr> <TAB>
    \ coc#pum#visible() ? coc#pum#next(1):
    \ <SID>check_back_space() ? "\<Tab>" :
    \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()

" hi CocSearch ctermfg=12 guifg=#18A3FF
" hi CocMenuSel ctermbg=109 guibg=#13354A

" function! CheckBackSpace() abort
" let col = col('.') - 1
" return !col || getline('.')[col - 1]  =~ '\s'
" endfunction
"
" " Insert <tab> when previous text is space, refresh completion if not.
" inoremap <silent><expr> <TAB>
"     \ coc#pum#visible() ? coc#pum#next(1):
"     \ CheckBackSpace() ? "\<Tab>" :
"     \ coc#refresh()
" inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" source $HOME/.vim/plug-config/coc.vim
"###### CoC #################################################################

"###### VimWiki ##########################
let g:vimwiki_list = [ { 'path' : '~/Documents/Vimwiki/' } ]
"###### VimWiki ##########################

"###### SnipMate ##########################
let g:snipMate = { 'snippet_version' : 1}
"###### SnipMate ##########################
