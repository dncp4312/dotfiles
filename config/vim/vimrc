source $XDG_CONFIG_HOME/vim/relocate_vim

" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ "
"   Settings
" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ "
syntax on
set shiftwidth=4
set number
set relativenumber
set smartindent
set nowrap
set noswapfile
set hlsearch
set ignorecase
set incsearch
set shell=/bin/zsh
set splitright
set splitbelow
set path+=**
set fillchars=fold:\ 
" set foldtext=v:folddashes.substitute(getline(v:foldstart),'***','','g')
" set termwinsize=10x0
" set termguicolors
" set guicursor=n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20
set backspace=indent,eol,start
set pastetoggle=<Leader>v
set clipboard=unnamedplus
" set cursorline
" set cursorlineopt=number
" set list listchars=tab:>,trail:<,nbsp:.
" set ttymouse=sgr
set mouse=a
set undodir=~/.vim/undodir
set undofile
set undolevels=1000
set undoreload=10000
" set iskeyword-=_
" filetype on
" filetype indent on
filetype plugin on

"  Underlines
" ━━━━━━━━━━━━━━
let &t_Ce = "\e[4:0m"                  " undercurl/Underline end
let &t_Us = "\e[4:2m"                  " underdouble
let &t_Cs = "\e[4:3m"                  " undercurl
let &t_ds = "\e[4:4m"                  " underdotted
let &t_Ds = "\e[4:5m"                  " underdashed
let &t_Te = "s"                        " Strikethrough end
let &t_Ts = "s"                        " Strikethrough
let &t_AU = "\<Esc>[58;5;%dm""]"       " termguicolors is unset
" let &t_8u = "\<Esc>[58;2;%lu;%lu;%lum" " termguicolors is set
" let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum" " only necessary to set the `guifg` foreground attribute
" let &t_RV = "\<Esc>[>c"                " only necessary for terminals which are not detected as xterm compatible
" https://groups.google.com/g/vim_dev/c/1AxIXaMfAu8

"  Cursor
" ━━━━━━━━━━━━━━
" 0 > blinking block
" 1 > blinking block (default)
" 2 > steady block
" 3 > blinking Underline
" 4 > steady underline
" 5 > blinking bar
" 6 > steady bar

let &t_SI = "\e[6 q" " insert-mode
let &t_SR = "\e[2 q" " insert-mode
let &t_EI = "\e[4 q" " normal

let mapleader = " "

" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ "
"   AutoCommands
" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ "
" autocmd BufWritePre * normal gg=G``
" autocmd BufNewFile,BufRead * setlocal formatoptions-=cro
autocmd BufWinEnter,BufNewFile * setlocal formatoptions-=cro
if has('nvim')
    autocmd VimLeave * set guicursor=a:hor90
else
    autocmd VimEnter * silent !echo "\e[4 q"
    autocmd VimLeave * silent !echo "\e[4 q"
end
" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ "
"   Remaps
" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ "
" map <C-g> :term<CR>
" map <C-S-g> :bo term<CR>
map <Leader>A ggVG
map <silent> <C-H> :noh<CR>
map <silent> <C-P> :FZF<CR>
map <Leader>= gg=G``

"  Command_Mode
" ━━━━━━━━━━━━━━

" cnoremap <silent> w!! execute 'silent! write !sudo -p " : "tee > /dev/null %' <bar> edit!
cnoremap <silent> w!! execute 'silent! write !sudo - tee > /dev/null %' <bar> edit!

"  Insert_Mode
" ━━━━━━━━━━━━━━
inoremap jj <ESC>
inoremap , ,<C-G>u
inoremap . .<C-G>u
inoremap <C-v> <C-r>+

"  Normal_Mode
" ━━━━━━━━━━━━━━
nmap <F2> <Plug>(coc-rename)
nmap <Leader>ff g_zf%
nmap <Leader>/ gcc
nnoremap <Leader>p "_dP

nnoremap Y y$
nnoremap <C-k> <C-w>
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
nnoremap <silent> <Leader>l :vsplit<CR>
nnoremap <silent> <Leader>j :split<CR>
nnoremap <silent> <Leader>g :highlight! Comment ctermfg=7<CR>
nnoremap <silent> <Leader>h :highlight! Comment ctermfg=16<CR>
nnoremap <silent> <Leader>x <cmd>!chmod +x %<CR>
nnoremap <silent> <Leader>gp gcip
" noremap <ESC> <Nop>
" nnoremap <C-j> <C-w>j
" nnoremap <C-h> <C-w>h
" nnoremap <C-k> <C-w>k
" nnoremap <C-l> <C-w>l
" nnoremap <Leader>1 1gt
" nnoremap <Leader>2 2gt
" nnoremap <Leader>3 3gt
" nnoremap <Leader>4 4gt
" nnoremap <Leader>5 5gt


"  Clipboard
" ━━━━━━━━━━━━━━
" nnoremap <Leader>v <cmd>set paste<CR>"+p<cmd>set nopaste<CR>
" vnoremap <Leader>c "+y
" nmap <Leader>Y "+Y
" nnoremap <C-C> "+y

"  Moving_Lines
" ━━━━━━━━━━━━━━
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '>-2<CR>gv=gv
inoremap <C-j> <esc>:m .+1<CR>==
inoremap <C-k> <esc>:m .-2<CR>==
" nnoremap <leader>j <esc>:m .+1<CR>==
" nnoremap <leader>k <esc>:m .-2<CR>==


" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ "
"   Remaps
" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ "
" highlight Cursor ctermbg=blue

highlight IncSearch ctermbg=darkmagenta ctermfg=white
highlight Search ctermbg=darkmagenta ctermfg=white

highlight LineNrAbove ctermfg=darkcyan
highlight LineNr ctermfg=white
highlight LineNrBelow ctermfg=cyan

highlight VertSplit ctermfg=darkmagenta ctermbg=darkmagenta
highlight Visual ctermbg=darkmagenta ctermfg=white
highlight Folded ctermbg=none ctermfg=magenta cterm=italic

" highlight Comment ctermfg=darkgrey cterm=italic,bold
highlight Comment ctermfg=darkgrey cterm=italic
highlight Constant ctermfg=darkyellow
highlight Special ctermfg=green
highlight SpecialChar ctermfg=red
highlight Identifier ctermfg=darkcyan
highlight Statement ctermfg=darkmagenta
highlight PreProc ctermfg=magenta
highlight Type ctermfg=yellow
" highlight Underline ctermfg=red cterm=reverse
highlight Ignore ctermfg=red cterm=reverse
highlight String ctermfg=darkgreen
highlight Boolean ctermfg=blue
highlight Number ctermfg=blue

" highlight Folded
highlight DiffAdd ctermbg=none ctermfg=green
highlight DiffChange ctermbg=none
highlight DiffDelete ctermbg=none ctermfg=red
highlight DiffText ctermbg=darkmagenta ctermfg=white

highlight SignColumn ctermbg=none

highlight Pmenu ctermbg=16 ctermfg=blue
highlight PmenuSel ctermbg=blue ctermfg=16
highlight PmenuSBar ctermbg=16 ctermfg=16
highlight PmenuThumb ctermbg=blue ctermfg=blue

highlight MatchParen ctermbg=darkmagenta ctermfg=white

highlight Conceal ctermbg=16 ctermfg=16

"  Ruby
" ━━━━━━━━━━━━━━
highlight rubyInterpolationDelimiter ctermfg=white
highlight rubyTestMacro ctermfg=darkmagenta
highlight rubyAssertion ctermfg=darkcyan
highlight rubyPseudoVariable ctermfg=blue
highlight rubyTodo ctermfg=white ctermbg=darkmagenta
" highlight rubyString ctermfg=darkgreen

"  CoC
" ━━━━━━━━━━━━━━
highlight CocNotificationError ctermbg=black ctermfg=16
highlight CocHighlightText ctermfg=yellow

" highlight CocErrorSign ctermbg=red ctermfg=white
" highlight CocErrorVirtualText ctermbg=red ctermfg=white
highlight CocErrorHighlight cterm=undercurl guisp=red
if !has('nvim')
    highlight CocErrorHighlight ctermul=red
endif
" highlight CocErrorLine ctermbg=red ctermfg=white 

" highlight CocWarningSign ctermbg=red ctermfg=white
" highlight CocWarningVirtualText ctermbg=red ctermfg=white
" highlight CocWarningHighlight ctermbg=red ctermfg=white
" highlight CocWarningLine ctermbg=red ctermfg=white

" highlight CocHintSign ctermbg=red ctermfg=white
" highlight CocHintVirtualText ctermbg=red ctermfg=white
" highlight CocHintHighlight ctermbg=red ctermfg=white
" highlight CocHintLine ctermbg=red ctermfg=white

" highlight CocInfoSign ctermbg=red ctermfg=white
" highlight CocInfoVirtualText ctermbg=red ctermfg=white
" highlight CocInfoHighlight ctermbg=red ctermfg=white
" highlight CocInfoLine ctermbg=red ctermfg=white

" highlight CocFadeOut ctermbg=red ctermfg=white
" highlight CocDeprecatedHighlight ctermbg=red ctermfg=white
" highlight CocStrikeThrough ctermbg=red ctermfg=white
" highlight CocUnusedHighlight ctermbg=red ctermfg=white

"  Unused
" ━━━━━━━━━━━━━━
" highlight LineNr ctermfg=4 
" highlight Comment ctermfg=8 cterm=italic,bold
" highlight Search ctermbg=5 ctermfg=7
" highlight Pmenu ctermbg=5 ctermfg=7
" highlight MatchParen ctermbg=5 ctermfg=7
" highlight Cursor ctermfg=7
" highlight Visual ctermbg=5 ctermfg=15
" highlight CursorLine term=bold ctermbg=8
" highlight CursorLineNr ctermbg=4 ctermfg=7
" set list listchars=tab:>,trail:<,nbsp:.

function! SynGroup()
    let l:s = synID(line('.'), col('.'), 1)
    echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
endfun
nnoremap sg :call SynGroup()<CR>

function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
nnoremap ss :call SynStack()<CR>

" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ "
"   Plugins
" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ "
call plug#begin()
  Plug 'vimwiki/vimwiki'
  Plug 'tpope/vim-fugitive'
  Plug 'samoshkin/vim-mergetool'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'itchyny/lightline.vim'
  Plug 'andymass/vim-matchup'
  Plug 'tpope/vim-surround'
  Plug 'godlygeek/tabular'
  Plug 'tomtom/tcomment_vim'
  Plug 'psliwka/vim-smoothie'
  Plug 'thoughtbot/vim-rspec'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-abolish'
  "Plug 'github/copilot.vim'
   
"  SnipMate
" ━━━━━━━━━━━━━━
  Plug 'MarcWeber/vim-addon-mw-utils'
  Plug 'tomtom/tlib_vim'
  Plug 'garbas/vim-snipmate'
  Plug 'honza/vim-snippets'
  Plug 'jiangmiao/auto-pairs'

"  Unused
" ━━━━━━━━━━━━━━
"  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
"  Plug 'rust-lang/rust.vim'
"  Plug 'ap/vim-css-color'
"  Plug 'ecomba/vim-ruby-refactoring'
"  Plug 'matchit.vim'

call plug#end()

" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ "
"   Plugins_Configurations
" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ "

"  Lightline
" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
set laststatus=2
set noshowmode
let g:lightline =   { 
	    \   'colorscheme' : 'molokai',
	    \   'active' 	    : {
	    \   	'left'      : [ [ 'mode', 'paste' ],
	    \  			[ 'readonly', 'absolutepath', 'modified' ] ],
	    \  	'right'     : [ [ 'lineinfo' ],
	    \  		        [ 'percent'  ],
	    \  		        [ 'filetype' ], ], },
	    \      'component' : {
	    \         'hellow' : 'Hey XeviL !' },
	    \   }

"  RSpec
" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
" let g:rspec_command = '!clear ; bundle exec rspec {spec}'
let g:rspec_command = '!clear ; docker compose exec -e RAILS_ENV=test backend bundle exec rspec {spec}'

nmap <Leader>t :call RunCurrentSpecFile()<CR>
nmap <Leader>a :call RunAllSpecs()<CR>
nmap <Leader>n :call RunNearestSpec()<CR>
" map <Leader>l :call RunLastSpec()<CR>

"  Tabularize
" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
nmap <silent> t= :Tabularize /=<CR>
nmap <silent> t> :Tabularize /=><CR>
nmap <silent> t( :Tabularize /(<CR>
nmap <silent> t) :Tabularize /)<CR>
nmap <silent> t{ :Tabularize /{<CR>
nmap <silent> t} :Tabularize /}<CR>
nmap <silent> t[ :Tabularize /[<CR>
nmap <silent> t] :Tabularize /]<CR>

"  CoC
" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
let g:coc_global_extentions = ['coc-tabnine', 'coc-snippets', 
	    \'coc-solargraph', 'coc-pairs', 'coc-volar',
	    \'coc-json']

let g:coc_config_home = '$XDG_CONFIG_HOME/vim/plug-config'
source $XDG_CONFIG_HOME/vim/plug-config/coc.vim

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <C-x><C-z> coc#pum#visible() ? coc#pum#stop() : "\<C-x>\<C-z>"

" highlight CocSearch ctermfg=12 guifg=#18A3FF
" highlight CocMenuSel ctermbg=109 guibg=#13354A

function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

			" " Press Tab and Shift+Tab and navigate around completion selections
			" inoremap <silent><expr> <Tab>
			"   \ pumvisible() ? "\<C-n>" :
			"   \ <SID>check_back_space() ? "\<Tab>" :
			"   \ coc#refresh()
			" inoremap <silent><expr> <S-Tab>
			"   \ pumvisible() ? "\<C-p>" :
			"   \ <SID>check_back_space() ? "\<S-Tab>" :
			"   \ coc#refresh()
			"
			" " Press Enter to select completion items or expand snippets
			" inoremap <silent><expr> <CR>
			"   \ pumvisible() ? "\<C-y>" :
			"   \ "\<C-g>u\<CR>"
			"
			" let g:coc_snippet_next = '<Tab>'              " Use Tab to jump to next snippet placeholder
			" let g:coc_snippet_prev = '<S-Tab>'            " Use Shift+Tab to jump to previous snippet placeholder

" Insert <tab> when previous text is space, refresh completion if not.
inoremap <silent><expr> <TAB>
    \ coc#pum#visible() ? coc#pum#next(1):
    \ CheckBackspace() ? "\<Tab>" :
    \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()

"  VimWiki
" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
let g:vimwiki_list = [ { 'path' : '~/Documents/Vimwiki/' } ]
"###### VimWiki ##########################

"  SnipMate
" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
let g:snipMate = { 'snippet_version' : 1}

"  Smoothie
" ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
let g:smoothie_update_interval = 1

